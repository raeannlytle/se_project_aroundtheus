!function(){"use strict";class e{constructor(e,t,s,i,r,n,o){this._name=e.name,this._linke=e.link,this._id=e._id,this._likes=e.likes,this._cardSelector=s,this._handleCardClick=i,this._handleDeleteClick=r,this._handleLikeClick=n,this._loadingLikeCheck=o,this._userId=t,this._userCardOwnerId=e.owner._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}setCardEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this._id)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this._id)}))}_handleCardLike(){this._likeButton.classList.toggle("card__like-button_active")}_handleImageClick(){this._handleCardClick(this._name,this._link)}deleteCard(){this._cardElement.remove(),this._cardElement=null}setLikesCounter(e){this._likes=e,this._cardLikes.textContent=e}addCardLike(){this._likeButton.classList.add("card__like-button_active")}removeCardLike(){this._likeButton.classList.remove("card__like-button_active")}checkCardLikeState(){return!!this._likeButton.classList.contains("card__like-button_active")}getView(){return this._cardElement=this._getTemplate(),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardImage=this._cardElement.querySelector(".card__iamge"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._imageModal=this._cardElement.querySelector("#card-image-modal"),this._cardLikes=this._cardElement.querySelector(".card__likes-counter"),this._loadingLikeCheck(this._likes,this._likeButton),this._cardLikes.textContent=this._likes.length,this._userId!=this._userCardOwnerId&&this._deleteButton.remove(),this._setCardEventListeners(),this._cardElement}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_setEventListeners(){this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass)):(this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass))}_hasInvalidInput(){return this._inputElements.some((e=>!e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputElements.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}};class s{constructor(e){let{popupSelector:t}=e;var s,i,r;s=this,r=e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()},(i=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var i=s.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(i="_handleOverlay"))in s?Object.defineProperty(s,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):s[i]=r,this._popupElement=document.querySelector(t),this._handleEscape=this._handleEscape.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscape)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscape)}_handleEscape(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleOverlay)}}class i extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=this._popupForm.querySelectorAll(".modal__form-input"),this._saveButton=this._popupForm.querySelector(".modal__button"),this._handleFormSubmit=t}isLoadingButtonState(e,t){this._saveButton.textContent=e?"Saving...":t}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._popupForm.reset()}}class r{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const n={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErroClass:"modal__error_input_type",errorClas:"modal__error_visible"},o=document.querySelector(".profile__edit-button"),a=document.querySelector("#profile-edit-modal"),l=document.querySelector(".profile__title"),d=document.querySelector(".profile__description"),c=document.querySelector("#profile-title-input"),h=document.querySelector("#profile-description-input"),u=document.querySelector("#card-add-modal"),_=document.querySelector(".profile__add-button"),m=document.querySelector("#profile-image-edit-modal"),p=document.querySelector(".profile__image"),v=document.querySelector(".profile__avatar-edit"),f=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getAPIInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}updateProfileInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}addCardLikes(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeCardLikes(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateProfileAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorizatio:"f3893e14-4f9e-48a1-abc0-0d253e595072","Content-Type":"application/json"}});new t(n,a).enableValidation(),new t(n,u).enableValidation(),new t(n,m).enableValidation();const k=new class{constructor(e){let{userName:t,userJob:s,userAvatar:i}=e;this._userName=t,this._userDescription=s,this._userAvatar=i}getUserInfo(){return{name:this._userName.textContent,about:this._userDescription.textContent,avatar:this._userAvatar}}setUserInfo(e){this._userName.textContent=e.name,this._userDescription.textContent=e.about,this._userAvatar.alt=e.name,this._userAvatar.src=e.avatar}}({userName:l,userJob:d,userAvatar:p});o.addEventListener("click",(function(){const{name:e,job:t}=k.getUserInfo();c.value=e,h.value=t,E.open()}));const E=new i("#profile-edit-modal",(e=>{E.isLoadingButtonState(!0),f.updateProfileInfo(e).then((e=>{k.setUserInfo(e),E.close()})).finally((()=>{E.isLoadingButtonState(!1,"Save")}))}));E.setEventListeners();const S=new i("#profile-image-edit-modal",(e=>{S.isLoadingButtonState(!0),f.updateProfileAvatar(e.avatar).then((e=>{k.setUserInfo(e),S.close()})).finally((()=>{S.isLoadingButtonState(!1,"Save")}))}));v.addEventListener("click",(()=>S.open())),S.setEventListeners();const L=class extends s{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector("#card-modal-image"),this._caption=this._popupElement.querySelector("#card-modal-caption")}open(e,t){this._caption.textContent=e,this._image.src=t,this._image.alt=e,super.open()}}("#card-image-modal");L.setEventListeners();const C=new class extends s{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._confirmButton=document.querySelector("#delete-confirm-button")}setSubmitAction(e){this._handleSubmit=e}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(e=>{e.preventDefault(),this._handleSubmit()}))}}("#delete-confirm-modal");let b,g;function y(t){const s=new e(t,g,"#card-template",((e,t)=>{L.open(e,t)}),(e=>{C.open(),C.setSubmitAction((()=>{f.deleteUserCard(e).then((()=>{s.deleteCard(),C.close()}))}))}),(e=>{s.checkCardLikeState()?f.removeCardLikes(e).then((e=>{s.removeCardLike(),s.setLikesCounter(e.likes.length)})):f.addCardLikes(e).then((e=>{s.addCardLike(),s.setLikesCounter(e.likes.length)}))}),(e=>{e.forEach((e=>{e._id===g&&s.addCardLike()}))}));return s}C.setEventListeners(),f.getAPIInfo().then((e=>{let[t,s]=e;g=t._id,k.setUserInfo(t),b=new r({items:s,renderer:e=>{const t=y(e);b.addItem(t.getView())}},".cards__list"),b.renderItems()}));const I=new i("#card-add-modal",(e=>{I.isLoadingButtonState(!0),f.addNewCard(e).then((e=>{const t=y(e);I.close(),b.addItem(t.getView())})).finally((()=>{I.isLoadingButtonState(!1,"Create")}))}));_.addEventListener("click",(()=>I.open())),I.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,